  name: Talking Web
  description: |
    In the vast expanse of the digital realm, HTTP (Hypertext Transfer Protocol) stands as the lingua franca, the common tongue through which web applications, servers, and clients converse.
    This module, **Talking Web**, delves deep into the intricate dance of crafting, decoding, and manipulating HTTP requests and responses.
    
    Both novice web developers and cybersecurity aficionados will come to realize that to truly grasp the heartbeat of the web, one must not only understand but master the nuances of HTTP communication.
    Mastery, however, is more than just absorbing theory; it's about rolling up your sleeves and getting hands-on.
    By the end of this journey, you won't be solely reliant on your web browser to make HTTP requests on your behalf. You'll possess the skills to converse directly with web servers, thus opening a new world of versatility and power.
    
    To aid you in this journey, this module arms you with formidable tools: `curl`, `netcat`, and `python requests`, setting the stage for dialogues with web servers, specifically on `localhost` at `port 80`.
    
    As you venture into the detailed intricacies of:
    - **Headers**: Metadata fields that carry vital information about the request or response.
    - **Paths**: The specific locations or resources you're aiming to access.
    - **Arguments**: Data points that can alter or dictate the behavior of your request.
    - **Form Data**: Data transferred from web forms.
    - **JSON**: A popular data interchange format that's lightweight and human-readable.
    - **Cookies**: Small data fragments stored on the user's computer, crucial for session management and tracking.
    - **Redirects**: Methods web services use to direct your browser from one location to another.
    
    As you sail through these challenges, you won't be navigating blind:
    ```sh
    hacker@talking-web-level-1:~$ /challenge/run
     * Serving Flask app 'run'
     * Debug mode: off
    WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
     * Running on http://127.0.0.1:80
    Press CTRL+C to quit
    ```
    
    This real-time feedback loop, made available through `$ /challenge/run`, serves as your personal compass, directing your gaze into the heartbeat of the web server's activities.
    While navigating, take note: the server's responses are not mere acknowledgments. They often whisper hints, nudging you towards the right path when you stumble.
    
    Yet, as with any craft, your tools are only as effective as your knowledge of them.
    Should you ever find yourself at a crossroads, uncertain of how to harness these tools, remember that knowledge is just a click away:
    - For `curl`, should its versatility bewilder you, the [man page for curl](https://linux.die.net/man/1/curl) is a treasure trove of wisdom.
    - If `netcat` seems enigmatic, allow [netcat's documentation](https://linux.die.net/man/1/nc) to shed light on its mysteries.
    - And, when the intricacies of the `python requests` library beckon, dive into its [comprehensive guide](https://requests.readthedocs.io/en/latest/).
    
    To truly initiate this journey, why not start by reaching out to the server in its native tongue? Let's put theory into practice. Go on, and use `curl` to speak with `localhost`.
  challenges:
  - id: http-curl
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-1
    name: "HTTP (curl)"
    description: Send an HTTP request using curl
  - id: http-nc
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-2
    name: "HTTP (netcat)"
    description: Send an HTTP request using nc
  - id: http-python
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-3
    name: "HTTP (python)"
    description: Send an HTTP request using python
  - id: http-host-curl
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-4
    name: "HTTP Host Header (curl)"
    description: Set the host header in an HTTP request using curl
  - id: http-host-nc
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-5
    name: "HTTP Host Header (netcat)"
    description: Set the host header in an HTTP request using nc
  - id: http-host-python
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-6
    name: "HTTP Host Header (python)"
    description: Set the host header in an HTTP request using python
  - id: http-path-curl
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-7
    name: "HTTP Paths (curl)"
    description: Set the path in an HTTP request using curl
  - id: http-path-nc
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-8
    name: "HTTP Paths (netcat)"
    description: Set the path in an HTTP request using nc
  - id: http-path-python
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-9
    name: "HTTP Paths (python)"
    description: Set the path in an HTTP request using python
  - id: url-encoding-curl
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-10
    name: "URL Encoding (curl)"
    description: URL encode a path in an HTTP request using curl
  - id: url-encoding-python
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-11
    name: "URL Encoding (netcat)"
    description: URL encode a path in an HTTP request using nc
  - id: url-encoding-nc
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-12
    name: "URL Encoding (python)"
    description: URL encode a path in an HTTP request using python
  - id: http-get-arguments-curl
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-13
    name: "HTTP Arguments (curl)"
    description: Specify an argument in an HTTP request using curl
  - id: http-get-arguments-nc
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-14
    name: "HTTP Arguments (netcat)"
    description: Specify an argument in an HTTP request using nc
  - id: http-get-arguments-python
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-15
    name: "HTTP Arguments (python)"
    description: Specify an argument in an HTTP request using python
  - id: http-get-multiarg-curl
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-16
    name: "Multiple HTTP Arguments (curl)"
    description: Specify multiple arguments in an HTTP request using curl
  - id: http-get-multiarg-nc
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-17
    name: "Multiple HTTP Arguments (netcat)"
    description: Specify multiple arguments in an HTTP request using nc
  - id: http-get-multiarg-python
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-18
    name: "Multiple HTTP Arguments (python)"
    description: Specify multiple arguments in an HTTP request using python
  - id: http-form-curl
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-19
    name: "HTTP Forms (curl)"
    description: Include form data in an HTTP request using curl
  - id: http-form-nc
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-20
    name: "HTTP Forms (netcat)"
    description: Include form data in an HTTP request using nc
  - id: http-form-python
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-21
    name: "HTTP Forms (python)"
    description: Include form data in an HTTP request using python
  - id: http-form-multi-curl
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-22
    name: "Multiple Form Fields (curl)"
    description: Include form data with multiple fields in an HTTP request using curl
  - id: http-form-multi-nc
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-23
    name: "Multiple Form Fields (netcat)"
    description: Include form data with multiple fields in an HTTP request using nc
  - id: http-form-multi-python
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-24
    name: "Multiple Form Fields (python)"
    description: Include form data with multiple fields in an HTTP request using python
  - id: http-json-curl
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-25
    name: "JSON Parameters (curl)"
    description: Include json data in an HTTP request using curl
  - id: http-json-nc
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-26
    name: "JSON Parameters (netcat)"
    description: Include json data in an HTTP request using nc
  - id: http-json-python
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-27
    name: "JSON Parameters (python)"
    description: Include json data in an HTTP request using python
  - id: http-json-complex-curl
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-28
    name: "Complex JSON Parameters (curl)"
    description: Include complex json data in an HTTP request using curl
  - id: http-json-complex-nc
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-29
    name: "Complex JSON Parameters (netcat)"
    description: Include complex json data in an HTTP request using nc
  - id: http-json-complex-python
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-30
    name: "Complex JSON Parameters (python)"
    description: Include complex json data in an HTTP request using python
  - id: http-redirect-curl
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-31
    name: "HTTP Redirects (curl)"
    description: Follow an HTTP redirect from HTTP response using curl
  - id: http-redirect-nc
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-32
    name: "HTTP Redirects (netcat)"
    description: Follow an HTTP redirect from HTTP response using nc
  - id: http-redirect-python
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-33
    name: "HTTP Redirects (python)"
    description: |
      Follow an HTTP redirect from HTTP response using python

      If you think this level is too easy: that's intended!
      You are achieving the same behavior as the previous level, but now with python-requests, a very friendly user-agent.
  - id: http-cookies-curl
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-34
    name: "HTTP Cookies (curl)"
    description: Include a cookie from HTTP response using curl
  - id: http-cookies-netcat
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-35
    name: "HTTP Cookies (netcat)"
    description: Include a cookie from HTTP response using nc
  - id: http-cookies-python
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-36
    name: "HTTP Cookies (python)"
    description: |
      Include a cookie from HTTP response using python
      ---
      **HINT:** If you aren't already using it, check out `requests.Session`!
  - id: http-multi-request-curl
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-37
    name: "Server State (curl)"
    description: Make multiple requests in response to stateful HTTP responses using curl
  - id: http-multi-request-nc
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-38
    name: "Server State (netcat)"
    description: Make multiple requests in response to stateful HTTP responses using nc
  - id: http-multi-request-python
    transfer:
      dojo: intro-to-cybersecurity
      module: talking-web
      challenge: level-39
    name: "Server State (python)"
    description: Make multiple requests in response to stateful HTTP responses using python
  resources:
  - name: "Talking Web: Introduction"
    type: lecture
    video: UW13N0CV-4s
    playlist: PL-ymxv0nOtqpbL9yW55RfoyUDjwotW9gR
    slides: 1Wdd3z3qSiknvYsETmosSiIFQtnNmeanFeWJz6SMazY8
  - name: "Talking Web: The Internet"
    type: lecture
    video: v64j2WFiJpc
    playlist: PL-ymxv0nOtqpbL9yW55RfoyUDjwotW9gR
    slides: 1HrAXQq6CvxOFfEUhuZTQbqEYOYA-FgLE9pL6ji9BcvI
  - name: "Talking Web: RFC 1945"
    type: lecture
    video: bPaY78xpRhQ
    playlist: PL-ymxv0nOtqpbL9yW55RfoyUDjwotW9gR
    slides: 1VWNFfmzbeVzQ-J887ngynb-1YdLGJEd4ype69MUWtkI
  - name: "Talking Web: URLs and Encoding"
    type: lecture
    video: yM9VM2DSkBU
    playlist: PL-ymxv0nOtqpbL9yW55RfoyUDjwotW9gR
    slides: 1twvI9r1RPZAuka_cABnvwhOnourhbOgu5C1f_NgZx9s
  - name: "Talking Web: State"
    type: lecture
    video: 2TeudjfK-tQ
    playlist: PL-ymxv0nOtqpbL9yW55RfoyUDjwotW9gR
    slides: 1O8ff6AdaTQ1eA8lhUo3GjIbtxicpQnKseIc-TSNW5hE
  - name: "Talking Web: Making HTTP Requests"
    type: lecture
    video: WNYaTYOUfZI
    playlist: PL-ymxv0nOtqpbL9yW55RfoyUDjwotW9gR
